// Generated by CoffeeScript 1.3.3
(function() {
  var Commands, Connection, KeyFrame, MixEngine, PresentationMode, TimelineKeyFrame, VideoPlayer, VideoSetting;

  VideoSetting = (function() {

    function VideoSetting(speed, volume) {
      this.speed = speed;
      this.volume = volume;
      this.overlay_width = 320;
      this.overlay_height = 240;
      this.midinote = null;
      this.offsetX = 0;
      this.offsetY = 0;
      this.overlayAlpha = 1;
    }

    VideoSetting.prototype.configureSettings = function(video_el) {
      this.video_el = video_el;
      this.video_el.playbackRate = this.speed;
      return this.video_el.volume = this.volume;
    };

    VideoSetting.prototype.drawSettingsSliders = function() {
      var controls, offsetXCtrl, offsetXlabel, offsetYCtrl, offsetYlabel, overlayAlphaCtrl, overlayAlphaLabel, overlayheightCtrl, overlayheightCtrlLabel, overlaywidthCtrl, overlaywidthCtrlLabel, speedCtrl, speedCtrlLabel, volumeCtrl, volumeCtrlLabel, _self;
      _self = this;
      controls = [];
      speedCtrlLabel = "<div class='labeltext speedlabel'>speed: " + _self.speed + "</div>";
      speedCtrl = $("<div class='label'></div>").slider({
        min: .5,
        max: 3,
        value: _self.speed,
        range: false,
        step: .1,
        slide: function(event, ui) {
          _self.speed = ui.value;
          return $(this).siblings(".speedlabel").text("speed: " + _self.speed);
        }
      });
      controls.push(speedCtrlLabel);
      controls.push(speedCtrl);
      volumeCtrlLabel = "<div class='labeltext volumelabel'>volume: " + _self.volume + "</div>";
      volumeCtrl = $("<div class='label'></div>").slider({
        min: 0,
        max: 1,
        value: _self.volume,
        range: false,
        step: .1,
        slide: function(event, ui) {
          _self.volume = ui.value;
          return $(this).siblings(".volumelabel").text("volume: " + _self.volume);
        }
      });
      controls.push(volumeCtrlLabel);
      controls.push(volumeCtrl);
      overlaywidthCtrlLabel = "<div class='labeltext overlaywidth'>canvas width: " + _self.overlay_width + "</div>";
      overlaywidthCtrl = $("<div class='label'></div>").slider({
        min: 0,
        max: 2000,
        value: _self.overlay_width,
        range: false,
        step: 1,
        slide: function(event, ui) {
          _self.overlay_width = ui.value;
          return $(this).siblings(".overlaywidth").text("canvas width: " + _self.overlay_width);
        }
      });
      controls.push(overlaywidthCtrlLabel);
      controls.push(overlaywidthCtrl);
      overlayheightCtrlLabel = "<div class='labeltext overlayheight'>canvas height: " + _self.overlay_height + "</div>";
      overlayheightCtrl = $("<div class='label'></div>").slider({
        min: 0,
        max: 2000,
        value: _self.overlay_height,
        range: false,
        step: 1,
        slide: function(event, ui) {
          _self.overlay_height = ui.value;
          return $(this).siblings(".overlayheight").text("canvas height: " + _self.overlay_height);
        }
      });
      controls.push(overlayheightCtrlLabel);
      controls.push(overlayheightCtrl);
      overlayAlphaLabel = "<div class='labeltext overlayAlpha'>overlayAlpha: " + _self.overlayAlpha + "</div>";
      overlayAlphaCtrl = $("<div class='label'></div>").slider({
        min: 0,
        max: 1,
        value: _self.overlayAlpha,
        range: false,
        step: .1,
        slide: function(event, ui) {
          _self.overlayAlpha = ui.value;
          return $(this).siblings(".overlayAlpha").text("overlayAlpha: " + _self.overlayAlpha);
        }
      });
      controls.push(overlayAlphaLabel);
      controls.push(overlayAlphaCtrl);
      offsetXlabel = "<div class='labeltext offsetX'>offsetX: " + _self.offsetX + "</div>";
      offsetXCtrl = $("<div class='label'></div>").slider({
        min: 0,
        max: 2000,
        value: _self.offsetX,
        range: false,
        step: .1,
        slide: function(event, ui) {
          _self.offsetX = ui.value;
          return $(this).siblings(".offsetX").text("offsetX: " + _self.offsetX);
        }
      });
      controls.push(offsetXlabel);
      controls.push(offsetXCtrl);
      offsetYlabel = "<div class='labeltext offsetX'>offsetY: " + _self.offsetY + "</div>";
      offsetYCtrl = $("<div class='label'></div>").slider({
        min: 0,
        max: 2000,
        value: _self.offsetY,
        range: false,
        step: .1,
        slide: function(event, ui) {
          _self.offsetY = ui.value;
          return $(this).siblings(".offsetY").text("offsetY: " + _self.offsetY);
        }
      });
      controls.push(offsetYlabel);
      controls.push(offsetYCtrl);
      return controls;
    };

    return VideoSetting;

  })();

  VideoPlayer = (function() {

    VideoPlayer.video = null;

    VideoPlayer.container = null;

    VideoPlayer.keyframes = null;

    VideoPlayer.loop = true;

    VideoPlayer.midiAssignment = null;

    VideoPlayer.startPoint = false;

    VideoPlayer.videoFilter = null;

    function VideoPlayer(top, left, engine, filename) {
      var _self;
      this.top = top;
      this.left = left;
      this.engine = engine;
      this.filename = filename;
      _self = this;
      this.keyframes = [];
      this.currentFrame = 0;
      this.video = $('<video></video>').appendTo('#container').wrap('<div class="video_element"/>');
      this.video_el = this.video.get(0);
      this.video_el.width = 200;
      this.vidSettings = new VideoSetting(1, 1);
      this.video_el.src = this.filename;
      this.video_el.addEventListener('loadedmetadata', function() {
        _self.vidSettings.configureSettings(_self.video_el);
        if (_self.keyframes.length === 0) {
          return _self.keyframes.push(new KeyFrame(0, _self.video_el.duration, _self.video_el.duration, this));
        }
      });
      this.video_el.addEventListener('timeupdate', function() {
        var activeSlider, connection, fromConnections, keyFrame, toConnections, vidLength, vidTime, _i, _len;
        vidTime = _self.video_el.currentTime;
        vidLength = _self.video_el.duration;
        keyFrame = _self.keyframes[_self.currentFrame];
        _self.vidSettings.configureSettings(_self.video_el);
        if (vidTime < keyFrame.start) {
          _self.video_el.currentTime = keyFrame.start;
        }
        if (vidTime >= keyFrame.end) {
          _self.currentFrame++;
          if (_self.currentFrame > _self.keyframes.length - 1) {
            _self.currentFrame = 0;
            if (_self.loop === false) {
              console.log("_self.loop = false");
              _self.video_el.pause();
            }
            if (_self.engine.connections != null) {
              fromConnections = _self.engine.getFromConnectionsForVideo(_self);
              toConnections = _self.engine.getToConnectionsForVideo(_self);
              if (_self.engine.hasFromOrToConnections(_self)) {
                _self.video_el.pause();
              }
              if (fromConnections.length > 0) {
                _self.video_el.pause();
              }
              for (_i = 0, _len = fromConnections.length; _i < _len; _i++) {
                connection = fromConnections[_i];
                connection.to.play();
              }
              if (toConnections.length > 0 && fromConnections.length === 0) {
                console.log("to connections = " + toConnections.length);
              }
            }
          }
          keyFrame = _self.keyframes[_self.currentFrame];
          _self.video_el.currentTime = keyFrame.start;
          if (_self.video_el.paused && !_self.engine.hasFromOrToConnections(_self)) {
            _self.video_el.play();
            if (_self.loop === false) {
              console.log("_self.loop = false");
              _self.video_el.pause();
            }
          }
        }
        if (_self.engine.activeVideo === _self) {
          $('.slider').removeClass('active');
          activeSlider = $('.slider')[_self.currentFrame];
          return $(activeSlider).addClass('active');
        }
      });
      this.container = this.video.parent();
      this.container.append("<div class='filename'>" + this.filename + "</div>");
      this.container.css('position', 'absolute');
      this.container.css('left', this.left);
      this.container.css('top', this.top);
      this.container.draggable();
      this.container.resizable();
      this.video.resizable();
      this.container.bind('drag', function() {
        return _self.engine.drawConnections();
      });
      this.container.bind('resize', function() {
        _self.video_el.width = $(this).width();
        return _self.video_el.height = $(this).height();
      });
      this.video.bind('click', function() {
        _self.engine.activeVideo = _self;
        return _self.engine.refreshUiWindow();
      });
      this.video.bind('dblclick', function() {
        return _self.engine.fromToConnection(_self);
      });
    }

    VideoPlayer.prototype.play = function() {
      this.startPoint = true;
      return this.video_el.play();
    };

    VideoPlayer.prototype.reset = function() {
      var keyFrame;
      this.currentFrame = 0;
      keyFrame = this.keyframes[this.currentFrame];
      console.log(keyFrame);
      return this.video_el.currentTime = keyFrame.start;
    };

    VideoPlayer.prototype.pause = function() {
      if (this.video_el.paused) {
        console.log("playing!");
        return this.video_el.play();
      } else {
        return this.video_el.pause();
      }
    };

    return VideoPlayer;

  })();

  TimelineKeyFrame = (function() {

    function TimelineKeyFrame(start, end, video, action) {
      this.start = start;
      this.end = end;
      this.video = video;
      this.action = action;
    }

    return TimelineKeyFrame;

  })();

  PresentationMode = (function() {

    function PresentationMode(engine) {
      this.engine = engine;
      this.canvas = $("<canvas id='presentation_mode'></canvas>");
      $("body").append(this.canvas);
      this.canvas_el = this.canvas.get(0);
      this.hidePresentation();
    }

    PresentationMode.prototype.displayPresentation = function() {
      this.canvas.css('display', 'block');
      return this.render();
    };

    PresentationMode.prototype.render = function() {
      var renderTimer, rendervids, _self;
      _self = this;
      rendervids = _self.renderVideos;
      return renderTimer = setInterval(function() {
        var cPA, ctx, settings, vid, _i, _len, _ref, _results;
        if (_self.canvas.is(":visible")) {
          _ref = _self.engine.videos;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            vid = _ref[_i];
            if (!vid.video_el.paused) {
              console.log("presentationMode, vidfilter = " + vid.videoFilter);
              settings = vid.vidSettings;
              ctx = _self.canvas_el.getContext('2d');
              ctx.globalAlpha = settings.overlayAlpha;
              ctx.drawImage(vid.video_el, 0, 0, settings.overlay_width, settings.overlay_height);
              if (vid.videoFilter != null) {
                if (vid.videoFilter !== 49) {
                  cPA = ctx.getImageData(0, 0, settings.overlay_width, settings.overlay_height);
                  if (vid.videoFilter === 50) {
                    cPA = filter_to_bw_outline(cPA, cPA, settings.overlay_width, settings.overlay_height);
                  } else if (vid.videoFilter === 51) {
                    cPA = filter_invert(cPA, cPA, settings.overlay_width, settings.overlay_height);
                  } else if (vid.videoFilter === 52) {
                    cPA = filter_matrix(cPA, cPA, settings.overlay_width, settings.overlay_height);
                  }
                  _results.push(ctx.putImageData(cPA, 0, 0));
                } else {
                  _results.push(void 0);
                }
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }, 33);
    };

    PresentationMode.prototype.hidePresentation = function() {
      return this.canvas.css('display', 'none');
    };

    return PresentationMode;

  })();

  MixEngine = (function() {

    MixEngine.activeVideo = null;

    MixEngine.midiClip = null;

    function MixEngine() {
      this.videoSources = ['./vids/enya.webm', './vids/korg.webm', './vids/sitar.webm', './vids/rocket_countdown.webm', './vids/pentap.webm', './vids/mulan.webm'];
      this.action = null;
      this.presentationMode = new PresentationMode(this);
      this.videos = [];
      this.connections = [];
      this.raphael = Raphael("container", "100%", "100%");
      this.uiOverlay = $("<div class='ui_overlay'></div>").hide();
      this.uiOverlay.appendTo('body');
      this.uiOverlayVisible = false;
    }

    MixEngine.prototype.setVideoSources = function(videosources) {
      var vidsource, _i, _len, _results;
      this.videoSources = [];
      _results = [];
      for (_i = 0, _len = videosources.length; _i < _len; _i++) {
        vidsource = videosources[_i];
        _results.push(this.videoSources.push('./vids/' + vidsource));
      }
      return _results;
    };

    MixEngine.prototype.setFilter = function(filterCode) {
      console.log(filterCode);
      if (this.activeVideo != null) {
        return this.activeVideo.videoFilter = filterCode;
      }
    };

    MixEngine.prototype.toggleLoop = function() {
      if (this.activeVideo != null) {
        if (this.activeVideo.loop === false) {
          this.activeVideo.loop = true;
        } else {
          this.activeVideo.loop = false;
        }
        return console.log("set loop to " + this.activeVideo.loop);
      }
    };

    MixEngine.prototype.handleMidi = function(midiMessage) {
      var video, _i, _len, _ref, _results;
      if (this.midiClip != null) {
        console.log(midiMessage);
        this.midiClip.midiAssignment = midiMessage;
        this.midiClip = null;
      }
      _ref = this.videos;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        video = _ref[_i];
        if (video.midiAssignment != null) {
          if (video.midiAssignment[1] === midiMessage[1]) {
            console.log("match - message = " + midiMessage);
            if (midiMessage[0] === 128) {
              console.log("pause..");
            }
            if (midiMessage[0] === 144) {
              console.log("play");
              video.reset();
              _results.push(video.play());
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    MixEngine.prototype.assignMidi = function() {
      this.midiClip = this.activeVideo;
      return console.log("midiclip = " + this.midiClip);
    };

    MixEngine.prototype.showPresentation = function() {
      if (this.presentationMode.canvas.is(":visible")) {
        return this.presentationMode.hidePresentation();
      } else {
        return this.presentationMode.displayPresentation();
      }
    };

    MixEngine.prototype.toggleEditor = function() {
      this.container = $("#container");
      if (this.container.is(":visible")) {
        return this.container.css("display", "none");
      } else {
        return this.container.css("display", "block");
      }
    };

    MixEngine.prototype.showUiOverlay = function() {
      this.uiOverlay.show();
      return this.uiOverlayVisible = true;
    };

    MixEngine.prototype.showVideoUi = function() {
      var dialogbox, selectList, vidsrc, _i, _len, _ref, _self;
      _self = this;
      selectList = "";
      _ref = this.videoSources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vidsrc = _ref[_i];
        selectList += "<option value='" + vidsrc + "'>" + vidsrc + "</option>";
      }
      return dialogbox = $("<div class='dialogbox'><select>" + selectList + "</select></div>").dialog({
        title: "add video",
        buttons: [
          {
            text: "add",
            click: function() {
              var vidToAdd, vidpath;
              vidpath = $(dialogbox).find("select").val();
              vidToAdd = new VideoPlayer(50, 40, _self, vidpath);
              _self.addVideo(vidToAdd);
              return dialogbox.dialog("destroy");
            }
          }, {
            text: "cancel",
            click: function() {
              return dialogbox.dialog("destroy");
            }
          }
        ]
      });
    };

    MixEngine.prototype.toggleUiOverlay = function() {
      if (this.uiOverlayVisible) {
        this.uiOverlay.hide();
        return this.uiOverlayVisible = false;
      } else {
        this.uiOverlay.show();
        return this.uiOverlayVisible = true;
      }
    };

    MixEngine.prototype.selectConnection = function(raphconn) {
      this.raphconn = raphconn;
      if (this.selectedConnection != null) {
        this.selectedConnection.line.attr("stroke", "#777777");
      }
      this.selectedConnection = this.raphconn;
      return this.selectedConnection.line.attr("stroke", "#ff0000");
    };

    MixEngine.prototype.addVideo = function(video) {
      this.video = video;
      return this.videos.push(this.video);
    };

    MixEngine.prototype.duplicateVideo = function() {
      var clonedVid, kf, _i, _len, _ref;
      if (this.activeVideo != null) {
        clonedVid = new VideoPlayer(this.activeVideo.container.position().top, this.activeVideo.container.position().left + 10, this, this.activeVideo.video_el.src);
        clonedVid.keyframes = [];
        _ref = this.activeVideo.keyframes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          kf = _ref[_i];
          clonedVid.keyframes.push(new KeyFrame(kf.start, kf.end, kf.maxlen, clonedVid));
        }
        return this.addVideo(clonedVid);
      }
    };

    MixEngine.prototype.hasFromOrToConnections = function(video) {
      this.video = video;
      if (this.hasFromConnection(this.video) || this.hasToConnection(this.video)) {
        return true;
      }
      return false;
    };

    MixEngine.prototype.hasFromConnection = function(video) {
      var connection, _i, _len, _ref;
      this.video = video;
      if (this.connections != null) {
        _ref = this.connections;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          connection = _ref[_i];
          if (connection.from === this.video) {
            return true;
          }
        }
      }
      return false;
    };

    MixEngine.prototype.hasToConnection = function(video) {
      var connection, _i, _len, _ref;
      this.video = video;
      if (this.connections != null) {
        _ref = this.connections;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          connection = _ref[_i];
          if (connection.to === this.video) {
            return true;
          }
        }
      }
      return false;
    };

    MixEngine.prototype.getFromConnectionsForVideo = function(video) {
      var connection, _connections, _i, _len, _ref;
      this.video = video;
      _connections = [];
      if (this.connections != null) {
        _ref = this.connections;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          connection = _ref[_i];
          if (connection.from === this.video) {
            _connections.push(connection);
          }
        }
      }
      return _connections;
    };

    MixEngine.prototype.getToConnectionsForVideo = function(video) {
      var connection, _connections, _i, _len, _ref;
      this.video = video;
      _connections = [];
      if (this.connections != null) {
        _ref = this.connections;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          connection = _ref[_i];
          if (connection.to === this.video) {
            _connections.push(connection);
          }
        }
      }
      return _connections;
    };

    MixEngine.prototype.fromToConnection = function(connection) {
      var conn;
      this.connection = connection;
      if (this.fromConnection != null) {
        if (this.fromConnection !== this.connection) {
          conn = new Connection(this.fromConnection, this.connection);
          this.connections.push(conn);
          this.drawConnections();
          this.connection = null;
          return this.fromConnection = null;
        }
      } else {
        return this.fromConnection = this.connection;
      }
    };

    MixEngine.prototype.drawConnections = function() {
      var connection, raphconn, _i, _len, _ref, _results, _self;
      _self = this;
      _ref = this.connections;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        connection = _ref[_i];
        if (connection.r_last != null) {
          connection.r_last.from.remove();
          connection.r_last.to.remove();
          connection.r_last.line.remove();
        }
        raphconn = this.raphael.connection(connection.from, connection.to, "#777777");
        raphconn.line.click(function() {
          var conn, _j, _len1, _ref1, _results1;
          _ref1 = _self.connections;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            conn = _ref1[_j];
            if (conn.r_last != null) {
              if (conn.r_last.line === this) {
                _results1.push(_self.selectConnection(conn.r_last));
              } else {
                _results1.push(void 0);
              }
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        });
        _results.push(connection.r_last = raphconn);
      }
      return _results;
    };

    MixEngine.prototype.removeActiveConnection = function() {
      var connection, _i, _len, _ref, _results, _self;
      _self = this;
      if (this.selectedConnection != null) {
        _ref = _self.connections;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          connection = _ref[_i];
          if (connection != null) {
            if (connection.r_last != null) {
              if (connection.r_last.from === _self.selectedConnection.from && connection.r_last.to === _self.selectedConnection.to) {
                _self.connections.splice(_self.connections.indexOf(connection), 1);
                console.log(_self.connections.length);
                connection.r_last.line.remove();
                _results.push(_self.selectedConnection = null);
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    MixEngine.prototype.toggleKeyFrameControl = function() {
      this.toggleUiOverlay();
      return this.drawKeyFrames();
    };

    MixEngine.prototype.refreshUiWindow = function() {
      var commands, _self;
      _self = this;
      if (this.action != null) {
        if (this.uiOverlay.is(":visible")) {
          commands = new Commands;
          if (this.action === commands.COMMAND_VIDSETTINGS) {
            return _self.drawVideoSettings();
          } else if (this.action === commands.COMMAND_KEYFRAME) {
            return _self.drawKeyFrames();
          }
        }
      }
    };

    MixEngine.prototype.toggleTimeLine = function() {
      this.toggleUiOverlay();
      return this.drawTimeLine();
    };

    MixEngine.prototype.drawTimeLine = function() {
      var video, _i, _len, _ref, _results, _self;
      _self = this;
      _ref = this.videos;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        video = _ref[_i];
        _results.push((function(video) {
          return _self.uiOverlay.append(video);
        })(video));
      }
      return _results;
    };

    MixEngine.prototype.drawKeyFrames = function() {
      var slider, _i, _len, _ref, _results, _self;
      this.uiOverlay.empty();
      _self = this;
      _ref = this.activeVideo.keyframes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slider = _ref[_i];
        _results.push((function(slider) {
          return _self.uiOverlay.append(slider.drawSlider());
        })(slider));
      }
      return _results;
    };

    MixEngine.prototype.drawVideoSettings = function() {
      var slider, _i, _len, _ref, _results;
      this.uiOverlay.empty();
      _ref = this.activeVideo.vidSettings.drawSettingsSliders();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slider = _ref[_i];
        _results.push(this.uiOverlay.append(slider));
      }
      return _results;
    };

    MixEngine.prototype.removeKeyFrame = function() {
      var keyFrame;
      if (this.activeVideo.keyframes.length > 1) {
        if (this.activeVideo.currentFrame === this.activeVideo.keyframes.length - 1) {
          this.activeVideo.currentFrame--;
          keyFrame = this.activeVideo.keyframes[this.activeVideo.currentFrame];
          this.activeVideo.video_el.currentTime = keyFrame.start;
        }
        this.activeVideo.keyframes.pop();
        return this.drawKeyFrames();
      }
    };

    MixEngine.prototype.addKeyFrame = function() {
      var newKeyFrame, prevKeyFrame;
      console.log(this.activeVideo);
      prevKeyFrame = this.activeVideo.keyframes[this.activeVideo.keyframes.length - 1];
      console.log(prevKeyFrame.start);
      console.log(prevKeyFrame.end);
      newKeyFrame = new KeyFrame(prevKeyFrame.start, prevKeyFrame.end, this.activeVideo.video_el.duration, this.activeVideo);
      this.activeVideo.keyframes.push(newKeyFrame);
      return this.drawKeyFrames();
    };

    return MixEngine;

  })();

  KeyFrame = (function() {

    function KeyFrame(start, end, maxlen, video) {
      this.start = start;
      this.end = end;
      this.maxlen = maxlen;
      this.video = video;
    }

    KeyFrame.prototype.drawSlider = function() {
      var _self;
      _self = this;
      console.log(_self.start);
      console.log(_self.end);
      return $("<div class='slider'></div>").slider({
        min: 0,
        max: _self.maxlen,
        values: [_self.start, _self.end],
        range: true,
        step: .1,
        slide: function(event, ui) {
          console.log(_self);
          _self.start = ui.values[0];
          _self.end = ui.values[1];
          console.log(_self.start);
          return console.log(_self.end);
        }
      });
    };

    return KeyFrame;

  })();

  Connection = (function() {

    function Connection(from, to) {
      this.from = from;
      this.to = to;
    }

    return Connection;

  })();

  Commands = (function() {

    function Commands() {
      this.COMMAND_ADD = 118;
      this.COMMAND_PLAY = 112;
      this.COMMAND_KEYFRAME = 107;
      this.COMMAND_TOGGLE_EDITOR = 101;
      this.COMMAND_STOP = 115;
      this.COMMAND_RESET = 114;
      this.COMMAND_TIMELINE = 116;
      this.COMMAND_REMOVE_CONNECTION = 120;
      this.COMMAND_ASSIGN_MIDI = 109;
      this.COMMAND_LOOP = 108;
      this.COMMAND_TOGGLE_PRESENTATION_MODE = 80;
      this.COMMAND_REMOVE_VIDEO = 88;
      this.COMMAND_DUPLICATE = 68;
      this.COMMAND_VIDSETTINGS = 99;
      this.COMMAND_FILTER_NONE = 49;
      this.COMMAND_FILTER_EDGEDETECTION = 50;
      this.COMMAND_FILTER_INVERT = 51;
      this.COMMAND_BW = 52;
      this.parentCommands = [this.COMMAND_KEYFRAME, this.COMMAND_TIMELINE, this.COMMAND_VIDSETTINGS];
    }

    return Commands;

  })();

  $(function() {
    var commands, engine, socket;
    engine = new MixEngine;
    commands = new Commands;
    if (typeof io !== "undefined" && io !== null) {
      socket = io.connect('http://localhost:8080');
      socket.on('message', function(msg) {
        return engine.handleMidi(msg);
      });
      socket.on('videos', function(files) {
        return engine.setVideoSources(files);
      });
    }
    return $('body').keypress(function(event) {
      console.log(event.charCode);
      if ($.inArray(event.charCode, commands.parentCommands) !== -1) {
        engine.action = event.charCode;
      }
      if (event.charCode === commands.COMMAND_ADD) {
        engine.showVideoUi();
      }
      if (event.charCode === commands.COMMAND_PLAY) {
        engine.activeVideo.play();
      } else if (event.charCode === commands.COMMAND_ASSIGN_MIDI) {
        engine.assignMidi();
      } else if (event.charCode === commands.COMMAND_KEYFRAME) {
        engine.toggleKeyFrameControl();
      } else if (event.charCode === commands.COMMAND_STOP) {
        engine.activeVideo.pause();
      } else if (event.charCode === commands.COMMAND_TOGGLE_PRESENTATION_MODE) {
        engine.showPresentation();
      } else if (event.charCode === commands.COMMAND_LOOP) {
        engine.toggleLoop();
      } else if (event.charCode === commands.COMMAND_TOGGLE_EDITOR) {
        engine.toggleEditor();
      } else if (event.charCode === commands.COMMAND_DUPLICATE) {
        engine.duplicateVideo();
      } else if (event.charCode === commands.COMMAND_FILTER_NONE || event.charCode === commands.COMMAND_FILTER_EDGEDETECTION || event.charCode === commands.COMMAND_FILTER_INVERT || event.charCode === commands.COMMAND_BW) {
        engine.setFilter(event.charCode);
      } else if (event.charCode === commands.COMMAND_VIDSETTINGS) {
        engine.toggleUiOverlay();
        if (engine.uiOverlay.is(":visible")) {
          engine.drawVideoSettings();
        }
      } else if (event.charCode === commands.COMMAND_REMOVE_CONNECTION) {
        engine.removeActiveConnection();
      } else if (event.charCode === commands.COMMAND_RESET) {
        engine.activeVideo.reset();
      } else if (event.charCode === commands.COMMAND_TIMELINE) {
        console.log("timeline");
        engine.toggleTimeLine();
      }
      if (engine.uiOverlay.is(":visible")) {
        console.log("visible!");
        console.log(engine.action);
        if (engine.action === commands.COMMAND_KEYFRAME) {
          if (event.charCode === 97) {
            engine.addKeyFrame();
          }
          if (event.charCode === 100) {
            return engine.removeKeyFrame();
          }
        } else if (engine.action === commands.COMMAND_TIMELINE) {
          if (event.charCode === 97) {
            return console.log("ADD!");
          }
        }
      }
    });
  });

}).call(this);
